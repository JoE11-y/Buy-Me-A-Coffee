type Coffee = record {
  id : text;
  name : text;
  message : text;
  timestamp : nat64;
};
type CoffeePayload = record { name : text; message : text; amount : nat64 };
type ManualReply = variant { Ok : TransferResult; Err : text };
type Tokens = record { e8s : nat64 };
type TransferError = variant {
  TxTooOld : _InlineTransferErrorTxTooOld;
  BadFee : _InlineTransferErrorBadFee;
  TxDuplicate : _InlineTransferErrorTxDuplicate;
  TxCreatedInFuture;
  InsufficientFunds : _InlineTransferErrorInsufficientFunds;
};
type TransferResult = variant { Ok : nat64; Err : TransferError };
type _AzleResult = variant { Ok : Coffee; Err : text };
type _AzleResult_1 = variant { Ok : vec Coffee; Err : text };
type _InlineTransferErrorBadFee = record { expected_fee : Tokens };
type _InlineTransferErrorInsufficientFunds = record { balance : Tokens };
type _InlineTransferErrorTxDuplicate = record { duplicate_of : nat64 };
type _InlineTransferErrorTxTooOld = record { allowed_window_nanos : nat64 };
service : () -> {
  deleteCoffee : (text) -> (_AzleResult);
  getAddressFromPrincipal : (principal) -> (text) query;
  getCoffee : (text) -> (_AzleResult) query;
  getCoffees : () -> (_AzleResult_1) query;
  sendCoffee : (CoffeePayload) -> (_AzleResult);
  withdrawFunds : (text, nat64) -> (ManualReply);
}